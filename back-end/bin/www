#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('back-end:server');
var http = require('http');

const messageModule = require('../modules/message')
const moment = require('moment')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
const hostname='10.9.49.161'

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io').listen(server);

io.on('connection', function (socket) {
  // setInterval(function () {
  //   socket.emit('list', 'abc')
  // }, 1000)
  // socket.broadcast.emit('list', 'test');
  // socket.on('backend', (msg) => {
  //   console.log(msg);
  // })

  socket.on('receive', async (msg,res,req) => {
    let reg= new RegExp('<[^<>]+>','g');
    msg = msg.replace(reg,'')
    socket.broadcast.emit('message', msg);
    let data = {}
    data.message = msg
    let now = moment().format("YYYY-MM-DD,HH:mm:ss")
    data.createtime = now
    let result = await messageModule.save(data)
  })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,hostname);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
